package com.abc.greendaoexample.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.abc.greendaoexample.db.LocationTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_TAG".
*/
public class LocationTagDao extends AbstractDao<LocationTag, Long> {

    public static final String TABLENAME = "LOCATION_TAG";

    /**
     * Properties of entity LocationTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Location_id = new Property(1, Long.class, "location_id", false, "LOCATION_ID");
        public final static Property Tag_id = new Property(2, Long.class, "tag_id", false, "TAG_ID");
    };

    private Query<LocationTag> location_LocationFKQuery;
    private Query<LocationTag> tag_TagFKQuery;

    public LocationTagDao(DaoConfig config) {
        super(config);
    }
    
    public LocationTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_TAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOCATION_ID\" INTEGER," + // 1: location_id
                "\"TAG_ID\" INTEGER);"); // 2: tag_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_TAG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, LocationTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long location_id = entity.getLocation_id();
        if (location_id != null) {
            stmt.bindLong(2, location_id);
        }
 
        Long tag_id = entity.getTag_id();
        if (tag_id != null) {
            stmt.bindLong(3, tag_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocationTag readEntity(Cursor cursor, int offset) {
        LocationTag entity = new LocationTag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // location_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // tag_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocationTag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocation_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTag_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocationTag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocationTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "locationFK" to-many relationship of Location. */
    public List<LocationTag> _queryLocation_LocationFK(Long tag_id) {
        synchronized (this) {
            if (location_LocationFKQuery == null) {
                QueryBuilder<LocationTag> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Tag_id.eq(null));
                location_LocationFKQuery = queryBuilder.build();
            }
        }
        Query<LocationTag> query = location_LocationFKQuery.forCurrentThread();
        query.setParameter(0, tag_id);
        return query.list();
    }

    /** Internal query to resolve the "tagFK" to-many relationship of Tag. */
    public List<LocationTag> _queryTag_TagFK(Long location_id) {
        synchronized (this) {
            if (tag_TagFKQuery == null) {
                QueryBuilder<LocationTag> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Location_id.eq(null));
                tag_TagFKQuery = queryBuilder.build();
            }
        }
        Query<LocationTag> query = tag_TagFKQuery.forCurrentThread();
        query.setParameter(0, location_id);
        return query.list();
    }

}
